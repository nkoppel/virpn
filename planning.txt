modes

exist to manage a piece of data and handle that data's interaction with the stack and user

have a manager which keeps track of current mode and allows modes to send commands to change mode

seperate ui and eval?

how to config modes?

some of them modes lol:

    number (handles a buffer with number input)
    map/fold/...?
    function
    variable (set/get)
    trig (rad/deg)
    normal (matrices/nth dimension lists)

methods:

    run: modifies stack given operator
    eval_input: given a binding, return operator(s) and a bool indicating whether to replace the previous operator(s).

each mode stores the mode beneath it, which is cloned from the modemap

needs:
    remember chain of above modes
    able to have upper modes process string output
    run seperately from evaluating input

current model: for each binding, give binding to normal mode's eval_input, which will then potentially pass it to stored lower mode's eval_input and so on.
to print, each eval_input returns a string representation of the operator it is handling and a boolean representing whether to end the token. 

how to tell whether to escape or ignore?
    irrevelent if next question is anwsered

how to tell which mode to go to from bindings?
    list of prefixes/bindings provided to manager
        how to have modes take over interface?
            have normal mode process requests for ownership - returned boolean which causes normal mode to pass all bindings to that mode on the next cycle

manager mode:
    handles which bindings are associated with which modes, ownership requests and which ops are associated with which modes

managers are structs passed to eval_input
they handle calling modes, bindings, operators(?), and mode ownership

methods:
    build: creates a new manager from a set of modes
    call: calls a mode by name
    manage: allows the manager to take control of bindings and which modes to call

global modes build local modes and provide info such as bindings, operators, and name and run the mode
each local mode can have a Rc<Cell<>> of its global mode and is in charge of eval_input

